use http_types::{StatusCode};

use crate::{APIErrorMeta, APIErrorClass};

#[derive(Copy, Clone, Eq, PartialEq, Hash)]
pub enum BuiltinAPIErrorMeta {
    // TODO: #[apierror(system="", code="1", message="Successful.", status_code=200, pvlost=0)]
    Successful,
    Unknown,
    Internal,
    Parameters,
    Signature,
    LicenseExpired,
    NotImplemented,
    NotFound,
    MultiFound,
    HttpBodyEmpty,
    XmlSyntax,
    RequestMethod,
    NoLogin,
    PermissionDenied,
    StorageFull,
    DataSourceFailure,
    TooHighRate,
    FailedPrecondition,
    OutOfRange,
    AlreadyExists,
    Aborted,
    Cancelled,
    DeadlineExceeded,
    Unavailable,
    DataLoss,
}

impl BuiltinAPIErrorMeta {
    pub fn meta(&self) -> impl APIErrorMeta {
        match self {
            Self::Successful => APIErrorClass::new("", "0", "Successful.", StatusCode::Ok),
            Self::Unknown => APIErrorClass::new("", "1", "Unexpected error.", StatusCode::InternalServerError),
            Self::Internal => APIErrorClass::new("", "2", "Failure.", StatusCode::InternalServerError),
            // TODO: generated by proc macro
            _ => APIErrorClass::new("", "2", "Failure.", StatusCode::InternalServerError),
        }
    }

    pub fn iterator() -> impl Iterator<Item = BuiltinAPIErrorMeta> { // FIXME: how to register into default registry?
        [
            Self::Successful, 
            Self::Unknown,
            Self::Internal,
            // TODO: generated by proc macro
        ].iter().copied()
    }
}

#[cfg(test)]
mod test {
    use super::{BuiltinAPIErrorMeta, APIErrorMeta};
    #[test]
    fn test_meta() {
        assert_eq!(BuiltinAPIErrorMeta::Successful.meta().message(), "Successful.");
        assert_eq!(BuiltinAPIErrorMeta::Unknown.meta().message(), "Unexpected error.");
    }

    #[test]
    fn test_iterator() {
        let mut s = String::from("");
        for meta in BuiltinAPIErrorMeta::iterator() {
            s.push_str(meta.meta().code());
        }
        assert_eq!(s, "012");
    }
}
